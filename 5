public class SimEngine {
    private double m;
    private double k; 
    private double c; 
    private double L0; 
    private double xMass; 
    private double yMass;
    private double xPunkt; 
    private double yPunkt;
    private double xV; 
    private double yV;
    private double g;
    public double ay;
    public double t;	
    public double temp;
    Vector2D polozenieMass; 
    Vector2D polozeniePunkt;
    public void getM(double get_M){ 
        m=get_M;
    }
    public void getK(double get_K){
        k=get_K;
    }
    public void getC(double get_C){
        c=get_C;
    }
    public void getL0(double get_L0){
        L0=get_L0;
    }
    public void getxMass(double get_xMass){
        xMass=get_xMass;
    }
    public void getyMass(double get_yMass){
        yMass=get_yMass;
    }
    public void getxPunkt(double get_xPunkt){
        xPunkt=get_xPunkt;
    }
    public void getyPunkt(double get_yPunkt){
        yPunkt=get_yPunkt;
    }
    public void getyV(double get_yV){
        yV=get_yV;
    }
    public void getG(double get_G){
        g=get_G;
    }
    public double show_xPunkt(){
        return polozenieMass.x;
    }
    public double show_yPunkt(){
        return polozeniePunkt.y;
    }
    public double show_xMass(){
        return polozenieMass.x;
    }
    public double show_yMass(){
        System.out.println(polozenieMass.y);
        return polozenieMass.y;
    }
    public SimEngine(double m1, double k1, double c1, double L1, double g1, double xMass1, double yMass1, double yPunkt1){
        m=m1;
        k=k1;
        c=c1;
        L0=L1;
        xV=0;
        yV=0;
        g=g1;
        ay=0;
        xMass=xMass1;
        yMass=yMass1;
        xPunkt=xMass1; //wiszą w jednej linii
        yPunkt=yPunkt1;
        t=0;
        polozenieMass=new Vector2D(xMass1, yMass1);
        polozeniePunkt=new Vector2D(xMass1, yPunkt1);
    }
    public void przebieg (double krok){
        t=krok;
        ay = (m * g - k * polozenieMass.y - c *yV)/m;
        yV = yV + ay * t;
        temp = temp +yV*t+ay*t*t/2;
        polozenieMass.y=(int)temp;
    }
    public void zerowanie(){
        yV=0;
    }
}

import java.util.TimerTask;
public class SimTask extends TimerTask {
    private static final long serialVersionUID = 1L;
    private SimEngine pole1; //pole do przechowywania obiektu klasy SimEngine
    private SpringApplet pole2; //pole do przechowywania obiektu klasy SpringApplet
    private double odstep; //pole do przechowywania odstepu czasowego
    public SimTask (SimEngine pole1, SpringApplet pole2, double odstep){
        this.pole1=pole1;
        this.pole2=pole2;
        this.odstep=odstep;
    }
    public void run() {
        pole1.przebieg(odstep); //uruchomienie obliczenia kroku
        pole2.repaint(); //odświeżenie wyświetlania powierzchni appletu
    }
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Timer;
import javax.swing.JPanel;
public class SpringApplet extends JApplet implements MouseListener, MouseMotionListener, ActionListener { //Informacja o implementacji obslugi myszy
    private static final long serialVersionUID = 1L;
    private SimEngine simE;
    private SimTask simT;
    private Timer time;
    private boolean stanMysz;
    private int x; //i jego wspólrzędne
    private int y;
    //Prywatne pola do przechowywania elementów interfejsu graficznego
    private TextField mass, wsK, wsC, G, Lpocz;
    private Button reset;
    //metody do implementacji interfejsów myszy
    @Override
    public void mouseMoved(MouseEvent arg0) {
    }
    @Override
    public void mouseClicked(MouseEvent e) {
    }
    @Override
    public void mouseEntered(MouseEvent e) {
    }
    @Override
    public void mouseExited(MouseEvent e) {
    }
    @Override
    public void mousePressed(MouseEvent e) {
        x = e.getX();
        y = e.getY();
        if((x>=(int) simE.polozenieMass.x-25 && x<=(int) simE.polozenieMass.x+25)&&(y>=(int) simE.polozenieMass.y && y<=(int) simE.polozenieMass.y+100)){
            time.cancel();
            simE.zerowanie();
            stanMysz=true;
        }
        e.consume();
    }
    @Override
    public void mouseReleased(MouseEvent e) {
        if(stanMysz==true)
        {
            simT=new SimTask(simE,this, 0.01);
            time=new Timer();
            time.scheduleAtFixedRate(simT, 0, 1);
            stanMysz=false;
        }
        e.consume();
    }
    public void mouseDragged(MouseEvent arg0) {
        if(stanMysz==true)
        {
            simE.polozenieMass.y=arg0.getY();
            repaint();
        }
        arg0.consume();
    }
    @Override public void init() { 
        this.setSize(200,300);
        simE=new SimEngine( 5,0.4,0.3, 100,10 ,100, 100 , 0);
        simT=new SimTask(simE,this, 0.01);
        time=new Timer();
        time.scheduleAtFixedRate(simT, 0, 1); //timer
        stanMysz=false;
        addMouseListener(this);
        addMouseMotionListener(this);
        reset=new Button("RESET");
        reset.addActionListener(this);
        add(reset);
        mass=new TextField("1",4);
        wsK=new TextField("2",4);
        wsC=new TextField("3",4);
        Lpocz=new TextField("4",4);
        G=new TextField("5",4);
        add(mass);
        add(wsK);
        add(wsC);
        add(Lpocz);
        add(G);
    }
    @Override public void paint(Graphics gDC){
        gDC.fillRect(0, 0, 400, 300); //czyszczenie appletu
        gDC.setColor(Color.green);
        gDC.drawLine((int) simE.show_xPunkt(),(int) simE.show_yPunkt(), (int) simE.show_xMass(), (int) simE.show_yMass());
        gDC.setColor(Color.red);
        gDC.fillOval(((int) simE.show_xMass()-25), (int) simE.show_yMass(),50,50);
        mass.setBounds(75,260,20,20);
        wsK.setBounds(100,260,20,20);
        wsC.setBounds(125,260,20,20);
        Lpocz.setBounds(150,260,20,20);
        G.setBounds(175,260,20,20);
        reset.setBounds(10,240,50,50);
    }
    @Override
    public void actionPerformed(ActionEvent a) {
        if (a.getSource()==reset){
            time.cancel();
            double m=Double.parseDouble(mass.getText());
            double k=Double.parseDouble(wsK.getText());
            double c=Double.parseDouble(wsC.getText());
            double l=Double.parseDouble(Lpocz.getText());
            double g=Double.parseDouble(G.getText());
            simE=new SimEngine(m, k,c,l,g, 100,20,0);
            simT=new SimTask(simE,this, 0.01);
            time=new Timer();
            time.scheduleAtFixedRate(simT, 0, 1);
            repaint();
        }
    }
}

public class Vector2D { 
    public double x; 
    public double y;
    public Vector2D(){ 
        x=0;
        y=0;
    }
    public Vector2D(double x1, double y1){
        x=x1;
        y=y1;
    }
    public Vector2D suma(Vector2D wektorDodany){
        return new Vector2D(x+wektorDodany.x,y+wektorDodany.y);
    }
    public Vector2D roznica(Vector2D wektorOdejmowany){
        return new Vector2D(x-wektorOdejmowany.x,y-wektorOdejmowany.y);
    }
    public Vector2D mnozenie(double k){
        return new Vector2D(x*k,y*k);
    }
    public double dlugosc(){
        return (Math.sqrt(x*x+y*y));
    }
    public Vector2D normalize(){
        return new Vector2D(x/dlugosc(),y/dlugosc());
    }
}
